{"version":3,"sources":["../../../units/urb-base-tools/update-local-ip-for-app.js"],"names":["os","require","fs","IPAddress","process","argv","undefined","interfaces","networkInterfaces","addresses","k","k2","address","family","internal","push","length","console","log","updateIPInFile","fileName","searchString","newContentOfLine","fileLines","readFileSync","split","index","indexOf","writeFileSync","join"],"mappings":";;AAEA,MAAMA,KAAKC,QAAS,IAAT,CAAX;AACA,MAAMC,KAAKD,QAAS,IAAT,CAAX;;AAEA,IAAIE,YAAYC,QAAQC,IAAR,CAAa,CAAb,CAAhB;;AAEA,IAAKF,cAAcG,SAAnB,EAA+B;AAC7B;AACA,QAAMC,aAAaP,GAAGQ,iBAAH,EAAnB;AACA,QAAMC,YAAY,EAAlB;AACA,OAAM,IAAIC,CAAV,IAAeH,UAAf,EAA4B;AAC1B;AACA,SAAM,IAAII,EAAV,IAAgBJ,WAAWG,CAAX,CAAhB,EAA+B;AAC7B;AACA,YAAME,UAAUL,WAAWG,CAAX,EAAcC,EAAd,CAAhB;AACA,UAAKC,QAAQC,MAAR,KAAmB,MAAnB,IAA6B,CAACD,QAAQE,QAA3C,EAAsDL,UAAUM,IAAV,CAAgBH,QAAQA,OAAxB;AACvD;AACF;;AAED,MAAKH,UAAUO,MAAV,IAAoB,CAAzB,EAA6Bb,YAAYM,UAAU,CAAV,CAAZ;AAC9B;;AAED,IAAKN,cAAcG,SAAnB,EAA+B;AAC7BW,UAAQC,GAAR,CAAa,gBAAgBf,SAA7B;AACAgB;AACE,iDADF;AAEE,iDAFF;AAGE;AACEhB,WADF;AAEE,mDALJ;;AAOAgB;AACE,gBADF;AAEE,mCAFF;AAGE,sCAAoChB,SAApC,GAAgD,iBAHlD;;AAKAgB,iBAAgB,QAAhB,EAA0B,OAA1B,EAAmC,UAAUhB,SAA7C;AACD,CAfD,MAeOc,QAAQC,GAAR,CAAa,iDAAb;;AAEP,SAASC,cAAT,CAAyBC,QAAzB,EAAmCC,YAAnC,EAAiDC,gBAAjD,EAAoE;AAClE,MAAIC,YAAYrB,GAAGsB,YAAH,CAAiBJ,QAAjB,EAA2B,MAA3B,EAAoCK,KAApC,CAA2C,IAA3C,CAAhB;AACA,MAAIC,QAAQ,CAAZ;;AAEA,SAAQA,QAAQH,UAAUP,MAA1B,EAAmC;AACjC,QAAKO,UAAUG,KAAV,EAAiBC,OAAjB,CAA0BN,YAA1B,IAA2C,CAAC,CAAjD,EAAqD;AACnD,UAAKE,UAAUG,KAAV,MAAqBJ,gBAA1B;AACEL,cAAQC,GAAR,CAAa,MAAME,QAAN,GAAiB,yBAA9B,EADF;AAEK;AACHG,kBAAUG,KAAV,IAAmBJ,gBAAnB;AACApB,WAAG0B,aAAH,CAAkBR,QAAlB,EAA4BG,UAAUM,IAAV,CAAgB,IAAhB,CAA5B;;AAEAZ,gBAAQC,GAAR,CAAa,MAAME,QAAN,GAAiB,mCAAjB,GAAuDjB,SAApE;AACD;AACD;AACD,KAVD,MAUOuB;AACR;AACF","file":"update-local-ip-for-app.js","sourcesContent":["// @flow\n\nconst os = require( 'os' )\nconst fs = require( 'fs' )\n\nlet IPAddress = process.argv[2]\n\nif ( IPAddress === undefined ) {\n  // Find out IP address\n  const interfaces = os.networkInterfaces()\n  const addresses = []\n  for ( let k in interfaces ) {\n    // $FlowIssue it will be there\n    for ( let k2 in interfaces[k]) {\n      // $FlowIssue it will be there\n      const address = interfaces[k][k2]\n      if ( address.family === 'IPv4' && !address.internal ) addresses.push( address.address )\n    }\n  }\n\n  if ( addresses.length >= 0 ) IPAddress = addresses[0]\n}\n\nif ( IPAddress !== undefined ) {\n  console.log( 'IP Address:' + IPAddress )\n  updateIPInFile(\n    './ios/UniversalRelayBoilerplate/AppDelegate.m',\n    'jsCodeLocation = [NSURL URLWithString:@\"http:',\n    '  jsCodeLocation = [NSURL URLWithString:@\"http://' +\n      IPAddress +\n      ':8081/index.ios.bundle?platform=ios&dev=true\"];',\n  )\n  updateIPInFile(\n    './app/app.js',\n    'let graphQLServerURL = \"http://',\n    'let graphQLServerURL = \"http://' + IPAddress + ':5555/graphql\";',\n  )\n  updateIPInFile( './.env', 'HOST=', 'HOST=' + IPAddress )\n} else console.log( 'IP Address not specified and could not be found' )\n\nfunction updateIPInFile( fileName, searchString, newContentOfLine ) {\n  let fileLines = fs.readFileSync( fileName, 'utf8' ).split( '\\n' )\n  let index = 0\n\n  while ( index < fileLines.length ) {\n    if ( fileLines[index].indexOf( searchString ) > -1 ) {\n      if ( fileLines[index] === newContentOfLine )\n        console.log( '[' + fileName + '] is already up to date' )\n      else {\n        fileLines[index] = newContentOfLine\n        fs.writeFileSync( fileName, fileLines.join( '\\n' ) )\n\n        console.log( '[' + fileName + '] has been updated with local IP ' + IPAddress )\n      }\n      break\n    } else index++\n  }\n}\n"]}