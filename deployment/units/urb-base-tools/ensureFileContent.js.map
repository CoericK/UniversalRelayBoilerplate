{"version":3,"sources":["../../../units/urb-base-tools/ensureFileContent.js"],"names":["readFileAsync","readFile","writeFileAsync","writeFile","ensureFileContent","fileName","currentFileContent","newFileContent","toString","console","log"],"mappings":";;AAEA,wB;AACA,4B;;AAEA,MAAMA,gBAAgB,qBAAW,aAAGC,QAAd,CAAtB;AACA,MAAMC,iBAAiB,qBAAW,aAAGC,SAAd,CAAvB,C;;AAEiB,eAAeC,iBAAf;AACfC,QADe;AAEfC,kBAFe;AAGfC,cAHe;AAIf;AACA;AACA,MAAKD,sBAAsB,IAA3B,EAAkCA,qBAAqB,CAAE,MAAMN,cAAeK,QAAf,CAAR,EAAoCG,QAApC,EAArB;;AAElC,MAAKF,uBAAuBC,cAA5B,EAA6C;AAC3CE,YAAQC,GAAR,CAAa,mBAAmBL,QAAhC;AACA,UAAMH,eAAgBG,QAAhB,EAA0BE,cAA1B,EAA0C,MAA1C,CAAN;AACD,GAHD,MAGO;AACLE,YAAQC,GAAR,CAAa,mBAAmBL,QAAhC;AACD;AACF,C","file":"ensureFileContent.js","sourcesContent":["// @flow\n\nimport fs from 'fs'\nimport { promisify } from 'util'\n\nconst readFileAsync = promisify( fs.readFile )\nconst writeFileAsync = promisify( fs.writeFile )\n\nexport default ( async function ensureFileContent(\n  fileName: string,\n  currentFileContent: ?string,\n  newFileContent: string,\n) {\n  // If the current file content is not provided, get it\n  if ( currentFileContent == null ) currentFileContent = ( await readFileAsync( fileName ) ).toString()\n\n  if ( currentFileContent !== newFileContent ) {\n    console.log( '‚úçÔ∏è  written:  ' + fileName )\n    await writeFileAsync( fileName, newFileContent, 'utf8' )\n  } else {\n    console.log( 'üìé  skipped:  ' + fileName )\n  }\n})\n"]}