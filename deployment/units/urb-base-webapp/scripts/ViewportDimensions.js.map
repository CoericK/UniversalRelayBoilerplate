{"version":3,"sources":["../../../../units/urb-base-webapp/scripts/ViewportDimensions.js"],"names":["ViewportDimensions","constructor","removeComponent","component","subscribedComponents","delete","handle_onResize","totalWidth","window","innerWidth","totalHeight","innerHeight","changesMade","viewportDimensions","viewportDimensionsVersion","dimensionsSubscribed","mustUpdate","dimension","_handle_ViewportDimensionChange","Map","get","dimensionName","subscriptionInfo","set","self","componentWillUnmount","currentFunction","bind","dimensionValue","Error"],"mappings":";;AAEe,MAAMA,kBAAN,CAAyB;;;;;AAKtCC,gBAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDdC,mBAhDc,GAgDMC,SAAF,IAAyB;AACzC,WAAKC,oBAAL,CAA0BC,MAA1B,CAAkCF,SAAlC;AACD,KAlDa;;AAoDdG,mBApDc,GAoDI,MAAM;AACtB,YAAMC,aAAaC,OAAOC,UAA1B;AACA,YAAMC,cAAcF,OAAOG,WAA3B;;AAEA;AACA,YAAMC,cAAc,EAApB;;AAEA,UAAKL,eAAe,KAAKM,kBAAL,CAAwBN,UAA5C,EAAyD;AACvDK,oBAAYL,UAAZ,GAAyB,IAAzB;AACA,aAAKM,kBAAL,CAAwBN,UAAxB,GAAqCA,UAArC;AACD;;AAED,UAAKG,gBAAgB,KAAKG,kBAAL,CAAwBH,WAA7C,EAA2D;AACzDE,oBAAYF,WAAZ,GAA0B,IAA1B;AACA,aAAKG,kBAAL,CAAwBH,WAAxB,GAAsCA,WAAtC;AACD;;AAED;AACA,YAAMI,4BAA4B,EAAE,KAAKA,yBAAzC;;AAEA;AACA,WAAM,IAAI,CAAEX,SAAF,EAAaY,oBAAb,CAAV,IAAiD,KAAKX,oBAAtD,EAA6E;AAC3E,YAAKD,UAAUW,yBAAV,KAAwCA,yBAA7C,EAAyE;AACvEX,oBAAUW,yBAAV,GAAsCA,yBAAtC;;AAEA;AACA,cAAIE,aAAa,KAAjB;AACA,eAAM,IAAIC,SAAV,IAAuBF,oBAAvB;AACE,cAAKH,YAAYK,SAAZ,CAAL,EAA6B;AAC3BD,yBAAa,IAAb;AACA;AACD;;AAEH;AACA,cAAKA,UAAL,EAAkBb,UAAUe,+BAAV;AACnB;AACF;AACF,KAzFa,CACZ,KAAKd,oBAAL,GAA4B,IAAIe,GAAJ,EAA5B,CAEA,KAAKL,yBAAL,GAAiC,CAAjC,CACA,KAAKD,kBAAL,GAA0B,EACxBN,YAAY,CADY,EAExBG,aAAa,CAFW,EAA1B,CAID,CAEDU,IAAKjB,SAAL,EAAwBkB,aAAxB,EAAgD,CAC9C;AACAlB,cAAUW,yBAAV,GAAsC,KAAKA,yBAA3C,CAF8C,CAI9C;AACA,QAAIQ,mBAAmB,KAAKlB,oBAAL,CAA0BgB,GAA1B,CAA+BjB,SAA/B,CAAvB,CACA,IAAKmB,oBAAoB,IAAzB,EAAgC,CAC9B;AACAA,yBAAmB,EAAnB,CACA,KAAKlB,oBAAL,CAA0BmB,GAA1B,CAA+BpB,SAA/B,EAA0CmB,gBAA1C,EAEA,MAAME,OAAO,IAAb,CAL8B,CAO9B;AACA,UAAKrB,UAAUsB,oBAAf,EAAsC,CACpC,MAAMC,kBAAkBvB,UAAUsB,oBAAV,CAA+BE,IAA/B,CAAqCxB,SAArC,CAAxB,CAEAA,UAAUsB,oBAAV,GAAiC,MAAM,CACrCD,KAAKtB,eAAL,CAAsBC,SAAtB,EACAuB,kBACD,CAHD,CAID,CAPD,MAQEvB,UAAUsB,oBAAV,GAAiC,MAAM,CACrCD,KAAKtB,eAAL,CAAsBC,SAAtB,EACD,CAFD,CAGH,CAzB6C,CA2B9C;AACAmB,qBAAiBD,aAAjB,IAAkC,IAAlC,CA5B8C,CA8B9C;AACA,QAAIO,iBAAiB,KAAKf,kBAAL,CAAwBQ,aAAxB,CAArB,CACA,IAAKO,kBAAkB,IAAvB,EACE,MAAM,IAAIC,KAAJ,CAAW,6CAA6CR,aAAxD,CAAN,CAEF,OAAOO,cAAP,CACD,CAnDqC,C,kBAAnB5B,kB","file":"ViewportDimensions.js","sourcesContent":["// @flow\n\nexport default class ViewportDimensions {\n  subscribedComponents: Map<Object, Object>\n  viewportDimensionsVersion: number\n  viewportDimensions: Object\n\n  constructor() {\n    this.subscribedComponents = new Map()\n\n    this.viewportDimensionsVersion = 1\n    this.viewportDimensions = {\n      totalWidth: 0,\n      totalHeight: 0,\n    }\n  }\n\n  get( component: Object, dimensionName: string ) {\n    // Mark that the component is being rendered with the current version\n    component.viewportDimensionsVersion = this.viewportDimensionsVersion\n\n    // Is the object subscribed? If not, it should be\n    let subscriptionInfo = this.subscribedComponents.get( component )\n    if ( subscriptionInfo == null ) {\n      // Add component to subscriptions dictionary\n      subscriptionInfo = {}\n      this.subscribedComponents.set( component, subscriptionInfo )\n\n      const self = this\n\n      // Make sure component unsubscribes when destroyed\n      if ( component.componentWillUnmount ) {\n        const currentFunction = component.componentWillUnmount.bind( component )\n\n        component.componentWillUnmount = () => {\n          self.removeComponent( component )\n          currentFunction()\n        }\n      } else\n        component.componentWillUnmount = () => {\n          self.removeComponent( component )\n        }\n    }\n\n    // Make sure it is subscribed for the right setting\n    subscriptionInfo[dimensionName] = true\n\n    // Now that the configuration is current, get the setting value\n    let dimensionValue = this.viewportDimensions[dimensionName]\n    if ( dimensionValue == null )\n      throw new Error( 'Could not find viewport dimension named ' + dimensionName )\n\n    return dimensionValue\n  }\n\n  removeComponent = ( component: Object ) => {\n    this.subscribedComponents.delete( component )\n  }\n\n  handle_onResize = () => {\n    const totalWidth = window.innerWidth\n    const totalHeight = window.innerHeight\n\n    // Record what changes were made to only notify the necessary components\n    const changesMade = {}\n\n    if ( totalWidth !== this.viewportDimensions.totalWidth ) {\n      changesMade.totalWidth = true\n      this.viewportDimensions.totalWidth = totalWidth\n    }\n\n    if ( totalHeight !== this.viewportDimensions.totalHeight ) {\n      changesMade.totalHeight = true\n      this.viewportDimensions.totalHeight = totalHeight\n    }\n\n    // Insrease the version of the dimensions to track what has been set to be updated already\n    const viewportDimensionsVersion = ++this.viewportDimensionsVersion\n\n    // Update all subscribed components\n    for ( let [ component, dimensionsSubscribed ] of this.subscribedComponents ) {\n      if ( component.viewportDimensionsVersion !== viewportDimensionsVersion ) {\n        component.viewportDimensionsVersion = viewportDimensionsVersion\n\n        // Did the component subscribe to the changes that were actually made?\n        let mustUpdate = false\n        for ( let dimension in dimensionsSubscribed )\n          if ( changesMade[dimension]) {\n            mustUpdate = true\n            break\n          }\n\n        // Re-render component if it subscribed to any of the changes\n        if ( mustUpdate ) component._handle_ViewportDimensionChange()\n      }\n    }\n  }\n}\n"]}