{"version":3,"sources":["../../../units/urb-base-webapp/serverWebApp.js"],"names":["require","load","envHost","process","env","HOST","Error","envPort","PORT","envPortWebpack","PORT_WEBPACK","serverWebApp","gatherLocationAndSiteInformation","req","res","assetsPath","siteInformation","NODE_ENV","isSiteBuilderDisabled","inEditingMode","siteConfiguration","version","render","renderError","obj","error","status","log","use","fetcher","cookies","UserToken1","redirect","element","url","historyMiddlewares","routeConfig","resolver","userAgent","headers","siteConfigurationSubset","webapp","builder","sheets","helmet","rewind","rootHTML","renderToString","resolve","__dirname","assets_path","root_html","server_side_styles","toString","JSON","stringify","relay_payload","isJSON","err","send"],"mappings":"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","file":"serverWebApp.js","sourcesContent":["// @flow\n\nimport path from 'path'\n\nimport createRender from 'found/lib/createRender'\nimport { getFarceResult } from 'found/lib/server'\nimport express from 'express'\nimport Helmet from 'react-helmet'\nimport React from 'react'\nimport { JssProvider, SheetsRegistry } from 'react-jss'\nimport ReactDOMServer from 'react-dom/server'\nimport serialize from 'serialize-javascript'\n\nimport ErrorComponent from '../_configuration/urb-base-webapp/ErrorComponent'\nimport getGraphQLLocalServerURL from '../_configuration/urb-base-server/getGraphQLLocalServerURL'\nimport { getSiteInformation } from '../_configuration/urb-base-server/siteSettings'\nimport log from '../urb-base-server/log'\nimport { version } from '../_configuration/package'\nimport UserToken2ServerRendering from '../_configuration/urb-base-server/UserToken2ServerRendering'\nimport AppWrapper from '../_configuration/urb-base-webapp/AppWrapper'\n\nimport FetcherServer from './fetcherServer'\nimport { createResolver, historyMiddlewares, routeConfig } from './router'\n\n// Read environment\nrequire( 'dotenv' ).load()\n\nconst envHost = process.env.HOST\nif ( envHost == null || typeof envHost !== 'string' )\n  throw new Error( 'Error: urb-base-webapp requires the environment variable HOST to be set' )\nconst envPort = process.env.PORT\nif ( envPort == null || typeof envPort !== 'string' )\n  throw new Error( 'Error: urb-base-webapp requires the environment variable PORT to be set' )\nconst envPortWebpack = process.env.PORT_WEBPACK\nif ( envPortWebpack == null || typeof envPortWebpack !== 'string' )\n  throw new Error( 'Error: urb-base-webapp requires the environment variable PORT_WEBPACK to be set' ) // Create express router\n\nconst serverWebApp = express()\n\nasync function gatherLocationAndSiteInformation( req: Object, res: Object ) {\n  let assetsPath\n  const siteInformation = await getSiteInformation( req, res )\n  if ( process.env.NODE_ENV === 'production' ) {\n    assetsPath =\n      siteInformation.isSiteBuilderDisabled || siteInformation.inEditingMode\n        ? // When editing in production, use the assets with the configuration readign code intact (built when cutting a site version)\n          `/assets/${version}`\n        : // When in production mode, serve the assets compiled by factory's publisher\n          `/sassets/${version}.${siteInformation.siteConfiguration.version}`\n  } else {\n    // When in development, always go to webpack over http\n    assetsPath = `http://${envHost}:${envPortWebpack}/${version}`\n  }\n  return { siteInformation, assetsPath }\n}\nconst render = createRender({\n  renderError( obj: Object ): React$Element<*> {\n    const { error } = obj\n    if ( error.status !== 404 )\n      log.log( 'error', 'Error: Render on server createRender renderError', obj )\n    return <ErrorComponent httpStatus={error.status} />\n  },\n})\nserverWebApp.use( async( req, res ) => {\n  try {\n    const { siteInformation, assetsPath } = await gatherLocationAndSiteInformation( req, res )\n\n    const fetcher = new FetcherServer(\n      `http://localhost:${envPort}` + getGraphQLLocalServerURL( siteInformation ),\n      req.cookies.UserToken1,\n      UserToken2ServerRendering,\n    )\n\n    const { redirect, element } = await getFarceResult({\n      url: req.url,\n      historyMiddlewares,\n      routeConfig,\n      resolver: createResolver( fetcher ),\n      render,\n    })\n\n    if ( redirect ) {\n      res.redirect( 302, redirect.url )\n      return\n    }\n\n    const userAgent = req.headers['user-agent']\n    const { siteConfiguration } = siteInformation\n    const siteConfigurationSubset = {\n      webapp: siteConfiguration.webapp,\n      builder: siteConfiguration.builder,\n    }\n\n    const sheets = new SheetsRegistry()\n    const helmet = Helmet.rewind()\n    const rootHTML = ReactDOMServer.renderToString(\n      <JssProvider registry={sheets}>\n        <AppWrapper userAgent={userAgent} siteConfiguration={siteConfigurationSubset}>\n          {element}\n        </AppWrapper>\n      </JssProvider>,\n    )\n\n    res.render( path.resolve( __dirname, 'html.ejs' ), {\n      assets_path: assetsPath,\n      root_html: rootHTML,\n      server_side_styles: sheets.toString(),\n      helmet,\n      siteConfiguration: JSON.stringify( siteConfigurationSubset ),\n      relay_payload: serialize( fetcher, { isJSON: true }),\n    })\n  } catch ( err ) {\n    log.log( 'error', 'Error: Render on server request', err )\n    res.status( 500 ).send( ReactDOMServer.renderToString( <ErrorComponent httpStatus={500} /> ) )\n  }\n})\nexport default serverWebApp\n"]}