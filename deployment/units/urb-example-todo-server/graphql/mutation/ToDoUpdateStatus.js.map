{"version":3,"sources":["../../../../../units/urb-example-todo-server/graphql/mutation/ToDoUpdateStatus.js"],"names":["name","inputFields","id","type","ToDo_Complete","outputFields","ToDo","resolve","local_id","context","rootValue","objectManager","args","getOneObject","Viewer","parent","getViewerUserId","mutateAndGetPayload","update"],"mappings":";;AAEA;AACA;;AAEA,4C;AACA,uF,yWANA;;AAQe,gDAA6B;AAC1CA,QAAM,kBADoC;;AAG1CC,eAAa;AACXC,QAAI,EAAEC,MAAM,+CAAR,EADO;AAEXC,mBAAe,EAAED,MAAM,oDAAR,EAFJ,EAH6B;;;AAQ1CE,gBAAc;AACZC,UAAM;AACJH,8BADI;AAEJI,eAAS,CAAC,EAAEC,QAAF,EAAD,QAA4BC,OAA5B,EAAqC,EAAEC,WAAWC,aAAb,EAArC,UAAoBC,IAApB;AACPD,wBAAcE,YAAd,CAA4B,MAA5B,EAAoC,EAAEX,IAAIM,QAAN,EAApC,CADO,GAFL,EADM;;;AAOZM,YAAQ;AACNX,gCADM;AAENI,eAAS,CAAEQ,MAAF,EAAUH,IAAV,EAAgBH,OAAhB,EAAyB,EAAEC,WAAWC,aAAb,EAAzB;AACPA,oBAAcE,YAAd,CAA4B,MAA5B,EAAoC;AAClCX,YAAIS,cAAcK,eAAd,EAD8B,EAApC,CAHI,EAPI,EAR4B;;;;;AAwB1CC,uBAAqB,OAAM,EAAEf,EAAF,EAAME,aAAN,EAAN,EAA6BK,OAA7B,EAAsC,EAAEC,WAAWC,aAAb,EAAtC,KAAuE;AAC1F,UAAMH,WAAW,gCAAcN,EAAd,EAAmBA,EAApC;;AAEA,UAAMS,cAAcO,MAAd,CAAsB,MAAtB,EAA8B;AAClChB,UAAIM,QAD8B;AAElCJ,mBAFkC,EAA9B,CAAN;;;AAKA,WAAO,EAAEI,QAAF,EAAP;AACD,GAjCyC,EAA7B,C","file":"ToDoUpdateStatus.js","sourcesContent":["// @flow weak\n\nimport { fromGlobalId, mutationWithClientMutationId } from 'graphql-relay'\nimport { GraphQLBoolean, GraphQLID, GraphQLNonNull } from 'graphql'\n\nimport ToDoType from '../type/ToDoType'\nimport ViewerType from '../../../../units/urb-base-server/graphql/type/ViewerType'\n\nexport default mutationWithClientMutationId({\n  name: 'ToDoUpdateStatus',\n\n  inputFields: {\n    id: { type: new GraphQLNonNull( GraphQLID ) },\n    ToDo_Complete: { type: new GraphQLNonNull( GraphQLBoolean ) },\n  },\n\n  outputFields: {\n    ToDo: {\n      type: ToDoType,\n      resolve: ({ local_id }, { ...args }, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject( 'ToDo', { id: local_id }),\n    },\n\n    Viewer: {\n      type: ViewerType,\n      resolve: ( parent, args, context, { rootValue: objectManager }) =>\n        objectManager.getOneObject( 'User', {\n          id: objectManager.getViewerUserId(),\n        }),\n    },\n  },\n\n  mutateAndGetPayload: async({ id, ToDo_Complete }, context, { rootValue: objectManager }) => {\n    const local_id = fromGlobalId( id ).id\n\n    await objectManager.update( 'ToDo', {\n      id: local_id,\n      ToDo_Complete,\n    })\n\n    return { local_id }\n  },\n})\n"]}