{"version":3,"sources":["../../../../units/urb-account-management-webapp/components/LoginDialog.jsx"],"names":["styles","theme","grow","flex","LoginDialog","Component","constructor","props","context","_handle_Close","handlerClose","_handle_onClick_LogIn","UserAccount_Identifier","User_Secret","state","setState","currentOperation","loc","window","location","host","protocol","hostname","port","response","fetch","method","credentials","headers","body","JSON","stringify","responseData","json","success","replace","href","errorMessage","error","err","message","_handle_onCLick_NewUser","handlerNewUser","_handle_onCLick_CancelLogIn","_handle_onClick_TryAgain","renderChallenge","classes","open","event","target","value","renderInProgress","renderFailure","render"],"mappings":"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","file":"LoginDialog.js","sourcesContent":["// @flow\n\nimport Button from 'material-ui/Button'\nimport Dialog, { DialogActions, DialogContent, DialogTitle } from 'material-ui/Dialog'\nimport { LinearProgress } from 'material-ui/Progress'\nimport Slide from 'material-ui/transitions/Slide'\nimport TextField from 'material-ui/TextField'\nimport { withStyles } from 'material-ui/styles'\nimport Typography from 'material-ui/Typography'\nimport React from 'react'\n\nconst styles = theme => ({\n  grow: {\n    flex: '1 1 auto',\n  },\n})\n\nclass LoginDialog extends React.Component<\n  {\n    UserAccount_Identifier: string,\n    User_Secret: string,\n    open: boolean,\n    handlerClose: Function,\n    handlerNewUser: Function,\n    classes: Object,\n  },\n  {\n    currentOperation: 'challenge' | 'in progress' | 'failure',\n    errorMessage: string,\n    UserAccount_Identifier: string,\n    User_Secret: string,\n  },\n> {\n  constructor( props: Object, context: Object ) {\n    super( props, context )\n\n    this.state = {\n      currentOperation: 'challenge',\n      errorMessage: '',\n      UserAccount_Identifier: '',\n      User_Secret: '',\n    }\n  }\n\n  _handle_Close = () => {\n    this.props.handlerClose()\n  }\n\n  _handle_onClick_LogIn = async() => {\n    const { UserAccount_Identifier, User_Secret } = this.state\n\n    this.setState({\n      currentOperation: 'in progress',\n      User_Secret: '', // In order to prevent the password from being accessed later\n    })\n\n    try {\n      const loc = window.location\n      const host = loc.protocol + '//' + loc.hostname + ':' + loc.port\n\n      const response = await fetch( host + '/auth/login', {\n        method: 'POST',\n        credentials: 'same-origin',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          UserAccount_Identifier: UserAccount_Identifier,\n          User_Secret: User_Secret,\n        }),\n      })\n\n      const responseData = await response.json()\n\n      if ( responseData.success ) {\n        // In case of success, realod the application from server\n        window.location.replace( window.location.href, '' )\n      } else {\n        // In case of error, tell user what the error is\n        this.setState({\n          currentOperation: 'failure',\n          errorMessage: responseData.error,\n        }) // ZZZ Does server really send the reason for the failed login?\n      }\n    } catch ( err ) {\n      // In case response could not be received properly, tell the user\n      // In case of error, tell user what the error is\n      this.setState({\n        currentOperation: 'failure',\n        errorMessage:\n          'Did not receive proper response from server. Please try again. Message:' + err.message,\n      })\n    }\n  }\n\n  _handle_onCLick_NewUser = () => {\n    this.props.handlerNewUser()\n  }\n\n  _handle_onCLick_CancelLogIn = () => {\n    this.setState({\n      currentOperation: 'failure',\n      errorMessage: 'Log in has been canceled',\n    })\n  }\n\n  _handle_onClick_TryAgain = () => {\n    this.setState({\n      currentOperation: 'challenge',\n      errorMessage: '',\n    })\n  }\n\n  renderChallenge() {\n    const { classes, open } = this.props\n    const { UserAccount_Identifier, User_Secret } = this.state\n\n    return (\n      <Dialog open={open} transition={Slide} onRequestClose={this._handle_Close}>\n        <DialogTitle>Log In</DialogTitle>\n\n        <DialogContent>\n          <TextField\n            label=\"Account Name\"\n            fullWidth={true}\n            value={UserAccount_Identifier}\n            onChange={event => this.setState({ UserAccount_Identifier: event.target.value })}\n          />\n          <TextField\n            label=\"Password\"\n            type=\"password\"\n            fullWidth={true}\n            value={User_Secret}\n            onChange={event => this.setState({ User_Secret: event.target.value })}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"accent\" onClick={this._handle_onCLick_NewUser}>\n            New User\n          </Button>\n          <div className={classes.grow} />\n          <Button onClick={this._handle_Close}>Cancel</Button>\n          <Button color=\"primary\" onClick={this._handle_onClick_LogIn}>\n            Log In\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  renderInProgress() {\n    const { open } = this.props\n    const { UserAccount_Identifier } = this.state\n\n    return (\n      <Dialog open={open} onRequestClose={this._handle_Close}>\n        <DialogTitle>Logging in</DialogTitle>\n\n        <DialogContent>\n          <Typography component=\"p\">\n            Logging in as\n            <br />\n            {UserAccount_Identifier}\n          </Typography>\n          <LinearProgress mode=\"query\" />\n        </DialogContent>\n        <DialogActions>\n          <Button color=\"accent\" onClick={this._handle_onCLick_CancelLogIn}>\n            Cancel\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  renderFailure() {\n    const { open } = this.props\n    const { UserAccount_Identifier, errorMessage } = this.state\n\n    return (\n      <Dialog open={open} onRequestClose={this._handle_Close}>\n        <DialogTitle>Log In Failed</DialogTitle>\n\n        <DialogContent>\n          <Typography component=\"p\">\n            Failed loggin in as\n            <br />\n            {UserAccount_Identifier}\n            <br />\n            Reason: {errorMessage}\n          </Typography>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={this._handle_onClick_TryAgain}>Try Again</Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n\n  render() {\n    const { currentOperation } = this.state\n\n    return (\n      <div>\n        {currentOperation === 'challenge' && this.renderChallenge()}\n        {currentOperation === 'in progress' && this.renderInProgress()}\n        {currentOperation === 'failure' && this.renderFailure()}\n      </div>\n    )\n  }\n}\n\nexport default withStyles( styles )( LoginDialog )\n"]}